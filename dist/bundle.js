/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ (() => {

eval("const RAD = Math.PI / 180;\nconst scrn = document.getElementById(\"canvas\");\nconst sctx = scrn.getContext(\"2d\");\nscrn.tabIndex = 1;\nscrn.addEventListener(\"click\", () => {\n  switch (state.curr) {\n    case state.getReady:\n      state.curr = state.Play;\n      SFX.start.play();\n      break;\n    case state.Play:\n      bird.flap();\n      break;\n    case state.gameOver:\n      state.curr = state.getReady;\n      bird.speed = 0;\n      bird.y = 100;\n      pipe.pipes = [];\n      UI.score.curr = 0;\n      SFX.played = false;\n      break;\n  }\n});\n\nscrn.onkeydown = function keyDown(e) {\n  if (e.keyCode == 32 || e.keyCode == 87 || e.keyCode == 38) {\n    // Space Key or W key or arrow up\n    switch (state.curr) {\n      case state.getReady:\n        state.curr = state.Play;\n        SFX.start.play();\n        break;\n      case state.Play:\n        bird.flap();\n        break;\n      case state.gameOver:\n        state.curr = state.getReady;\n        bird.speed = 0;\n        bird.y = 100;\n        pipe.pipes = [];\n        UI.score.curr = 0;\n        SFX.played = false;\n        break;\n    }\n  }\n};\n\nlet frames = 0;\nlet dx = 2;\nconst state = {\n  curr: 0,\n  getReady: 0,\n  Play: 1,\n  gameOver: 2,\n};\nconst SFX = {\n  start: new Audio(),\n  flap: new Audio(),\n  score: new Audio(),\n  hit: new Audio(),\n  die: new Audio(),\n  played: false,\n};\nconst gnd = {\n  sprite: new Image(),\n  x: 0,\n  y: 0,\n  draw: function () {\n    this.y = parseFloat(scrn.height - this.sprite.height);\n    sctx.drawImage(this.sprite, this.x, this.y);\n  },\n  update: function () {\n    if (state.curr != state.Play) return;\n    this.x -= dx;\n    this.x = this.x % (this.sprite.width / 2);\n  },\n};\nconst bg = {\n  sprite: new Image(),\n  x: 0,\n  y: 0,\n  draw: function () {\n    y = parseFloat(scrn.height - this.sprite.height);\n    sctx.drawImage(this.sprite, this.x, y);\n  },\n};\nconst pipe = {\n  top: { sprite: new Image() },\n  bot: { sprite: new Image() },\n  gap: 85,\n  moved: true,\n  pipes: [],\n  draw: function () {\n    for (let i = 0; i < this.pipes.length; i++) {\n      let p = this.pipes[i];\n      sctx.drawImage(this.top.sprite, p.x, p.y);\n      sctx.drawImage(\n        this.bot.sprite,\n        p.x,\n        p.y + parseFloat(this.top.sprite.height) + this.gap\n      );\n    }\n  },\n  update: function () {\n    if (state.curr != state.Play) return;\n    if (frames % 100 == 0) {\n      this.pipes.push({\n        x: parseFloat(scrn.width),\n        y: -210 * Math.min(Math.random() + 1, 1.8),\n      });\n    }\n    this.pipes.forEach((pipe) => {\n      pipe.x -= dx;\n    });\n\n    if (this.pipes.length && this.pipes[0].x < -this.top.sprite.width) {\n      this.pipes.shift();\n      this.moved = true;\n    }\n  },\n};\nconst bird = {\n  animations: [\n    { sprite: new Image() },\n    { sprite: new Image() },\n    { sprite: new Image() },\n    { sprite: new Image() },\n  ],\n  rotatation: 0,\n  x: 50,\n  y: 100,\n  speed: 0,\n  gravity: 0.125,\n  thrust: 3.6,\n  frame: 0,\n  draw: function () {\n    let h = this.animations[this.frame].sprite.height;\n    let w = this.animations[this.frame].sprite.width;\n    sctx.save();\n    sctx.translate(this.x, this.y);\n    sctx.rotate(this.rotatation * RAD);\n    sctx.drawImage(this.animations[this.frame].sprite, -w / 2, -h / 2);\n    sctx.restore();\n  },\n  update: function () {\n    let r = parseFloat(this.animations[0].sprite.width) / 2;\n    switch (state.curr) {\n      case state.getReady:\n        this.rotatation = 0;\n        this.y += frames % 10 == 0 ? Math.sin(frames * RAD) : 0;\n        this.frame += frames % 10 == 0 ? 1 : 0;\n        break;\n      case state.Play:\n        this.frame += frames % 5 == 0 ? 1 : 0;\n        this.y += this.speed;\n        this.setRotation();\n        this.speed += this.gravity;\n        if (this.y + r >= gnd.y || this.collisioned()) {\n          state.curr = state.gameOver;\n        }\n\n        break;\n      case state.gameOver:\n        this.frame = 1;\n        if (this.y + r < gnd.y) {\n          this.y += this.speed;\n          this.setRotation();\n          this.speed += this.gravity * 2;\n        } else {\n          this.speed = 0;\n          this.y = gnd.y - r;\n          this.rotatation = 90;\n          if (!SFX.played) {\n            SFX.die.play();\n            SFX.played = true;\n          }\n        }\n\n        break;\n    }\n    this.frame = this.frame % this.animations.length;\n  },\n  flap: function () {\n    if (this.y > 0) {\n      SFX.flap.play();\n      this.speed = -this.thrust;\n    }\n  },\n  setRotation: function () {\n    if (this.speed <= 0) {\n      this.rotatation = Math.max(-25, (-25 * this.speed) / (-1 * this.thrust));\n    } else if (this.speed > 0) {\n      this.rotatation = Math.min(90, (90 * this.speed) / (this.thrust * 2));\n    }\n  },\n  collisioned: function () {\n    if (!pipe.pipes.length) return;\n    let bird = this.animations[0].sprite;\n    let x = pipe.pipes[0].x;\n    let y = pipe.pipes[0].y;\n    let r = bird.height / 4 + bird.width / 4;\n    let roof = y + parseFloat(pipe.top.sprite.height);\n    let floor = roof + pipe.gap;\n    let w = parseFloat(pipe.top.sprite.width);\n    if (this.x + r >= x) {\n      if (this.x + r < x + w) {\n        if (this.y - r <= roof || this.y + r >= floor) {\n          SFX.hit.play();\n          return true;\n        }\n      } else if (pipe.moved) {\n        UI.score.curr++;\n        SFX.score.play();\n        pipe.moved = false;\n      }\n    }\n  },\n};\nconst UI = {\n  getReady: { sprite: new Image() },\n  gameOver: { sprite: new Image() },\n  tap: [{ sprite: new Image() }, { sprite: new Image() }],\n  score: {\n    curr: 0,\n    best: 0,\n  },\n  x: 0,\n  y: 0,\n  tx: 0,\n  ty: 0,\n  frame: 0,\n  draw: function () {\n    switch (state.curr) {\n      case state.getReady:\n        this.y = parseFloat(scrn.height - this.getReady.sprite.height) / 2;\n        this.x = parseFloat(scrn.width - this.getReady.sprite.width) / 2;\n        this.tx = parseFloat(scrn.width - this.tap[0].sprite.width) / 2;\n        this.ty =\n          this.y + this.getReady.sprite.height - this.tap[0].sprite.height;\n        sctx.drawImage(this.getReady.sprite, this.x, this.y);\n        sctx.drawImage(this.tap[this.frame].sprite, this.tx, this.ty);\n        break;\n      case state.gameOver:\n        this.y = parseFloat(scrn.height - this.gameOver.sprite.height) / 2;\n        this.x = parseFloat(scrn.width - this.gameOver.sprite.width) / 2;\n        this.tx = parseFloat(scrn.width - this.tap[0].sprite.width) / 2;\n        this.ty =\n          this.y + this.gameOver.sprite.height - this.tap[0].sprite.height;\n        sctx.drawImage(this.gameOver.sprite, this.x, this.y);\n        sctx.drawImage(this.tap[this.frame].sprite, this.tx, this.ty);\n        break;\n    }\n    this.drawScore();\n  },\n  drawScore: function () {\n    sctx.fillStyle = \"#FFFFFF\";\n    sctx.strokeStyle = \"#000000\";\n    switch (state.curr) {\n      case state.Play:\n        sctx.lineWidth = \"2\";\n        sctx.font = \"35px Squada One\";\n        sctx.fillText(this.score.curr, scrn.width / 2 - 5, 50);\n        sctx.strokeText(this.score.curr, scrn.width / 2 - 5, 50);\n        break;\n      case state.gameOver:\n        sctx.lineWidth = \"2\";\n        sctx.font = \"40px Squada One\";\n        let sc = `SCORE :     ${this.score.curr}`;\n        try {\n          this.score.best = Math.max(\n            this.score.curr,\n            localStorage.getItem(\"best\")\n          );\n          localStorage.setItem(\"best\", this.score.best);\n          let bs = `BEST  :     ${this.score.best}`;\n          sctx.fillText(sc, scrn.width / 2 - 80, scrn.height / 2 + 0);\n          sctx.strokeText(sc, scrn.width / 2 - 80, scrn.height / 2 + 0);\n          sctx.fillText(bs, scrn.width / 2 - 80, scrn.height / 2 + 30);\n          sctx.strokeText(bs, scrn.width / 2 - 80, scrn.height / 2 + 30);\n        } catch (e) {\n          sctx.fillText(sc, scrn.width / 2 - 85, scrn.height / 2 + 15);\n          sctx.strokeText(sc, scrn.width / 2 - 85, scrn.height / 2 + 15);\n        }\n\n        break;\n    }\n  },\n  update: function () {\n    if (state.curr == state.Play) return;\n    this.frame += frames % 10 == 0 ? 1 : 0;\n    this.frame = this.frame % this.tap.length;\n  },\n};\n\ngnd.sprite.src = \"img/ground.png\";\nbg.sprite.src = \"img/BG.png\";\npipe.top.sprite.src = \"img/toppipe.png\";\npipe.bot.sprite.src = \"img/botpipe.png\";\nUI.gameOver.sprite.src = \"img/go.png\";\nUI.getReady.sprite.src = \"img/getready.png\";\nUI.tap[0].sprite.src = \"img/tap/t0.png\";\nUI.tap[1].sprite.src = \"img/tap/t1.png\";\nbird.animations[0].sprite.src = \"img/bird/b0.png\";\nbird.animations[1].sprite.src = \"img/bird/b1.png\";\nbird.animations[2].sprite.src = \"img/bird/b2.png\";\nbird.animations[3].sprite.src = \"img/bird/b0.png\";\nSFX.start.src = \"sound/start.mp3\";\nSFX.flap.src = \"sound/flap.mp3\";\nSFX.score.src = \"sound/score.mp3\";\nSFX.hit.src = \"sound/hit.mp3\";\nSFX.die.src = \"sound/die.mp3\";\n\nfunction gameLoop() {\n  update();\n  draw();\n  frames++;\n}\n\nfunction update() {\n  bird.update();\n  gnd.update();\n  pipe.update();\n  UI.update();\n}\n\nfunction draw() {\n  sctx.fillStyle = \"#30c0df\";\n  sctx.fillRect(0, 0, scrn.width, scrn.height);\n  bg.draw();\n  pipe.draw();\n\n  bird.draw();\n  gnd.draw();\n  UI.draw();\n}\n\nsetInterval(gameLoop, 20);\n\n\n//# sourceURL=webpack://bistsybird/./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.js"]();
/******/ 	
/******/ })()
;